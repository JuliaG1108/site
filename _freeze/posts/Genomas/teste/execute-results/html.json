{
  "hash": "511862fa1e828513adc22578ca07d752",
  "result": {
    "markdown": "---\ntitle: \"Comparação de Genomas\"\nauthor: \"Júlia Gualberto\"\ndate: \"2022-06-30\"\ncategories: [code]\n---\n\n\nPretende-se comparar duas sequências de DNA: SARS-CoV-2 identificado na cidade de Wuhan (China) e o Virus da Influenza A identificado na California (US).\n\nO DNA é uma molécula presente em todos os seres vivos, que é responsável por armazenar as caracterı́sticas hereditárias. Ela é composta por sequências de nucleotı́deos, que podem ser de quatro tipos: Adenina (A), Timina (T), Citosina (C) ou Guanina (G).\n\nNeste estudo de caso, queremos avaliar se estruturas com funções parecidas de organismos diferentes têm diferenças. Para isso vamos avaliar a quantidade de pares de nucleotı́deos.\n\nPara comparar as duas estruturas requere-se um mapa de calor (Heatmap) que permita realizar a comparação dos pares de nucleotı́deos. Comente sobre os resultados encontrados.\n\n![](genoma.jpeg)\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#!pip install matplotlib\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ninfluenza = open('sequence-influenza.txt').read() # Ler o arquivo\n\ninfluenza = influenza.replace(\"\\n\",\"\") # retirar os \"\\n\"\npares_influenza = [\n    influenza[i] + influenza[i + 1] for i in range(len(influenza) - 1)\n]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom itertools import permutations\n\ngenes = ['A', 'T', 'C', 'G']\n\ncombinations_genes = list(permutations(genes, 2))\n\n\ntodos_genes = [''.join(i) for i in combinations_genes]\ntodos_genes.extend(['AA', 'TT', 'CC', 'GG'])\n\n# dicionario\ngenes_dict = {i:pares_influenza.count(i) for i in todos_genes}\n\n# colocar em ordem\nordered_dict = sorted(genes_dict.items(), key=lambda x: x[0], reverse=False)\n\nordered_dict = {i[0]:i[1] for i in ordered_dict}\n\n# matriz\nmatriz_influenza = np.array(list(ordered_dict.values())).reshape(4,4)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n\nplt.imshow(matriz_influenza, cmap = 'Blues', origin=\"lower\")\nplt.xlabel('Índice da linha'); plt.ylabel('Índice da coluna')\nplt.xticks((0,1,2,3),['A','C', 'G', 'T'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n([<matplotlib.axis.XTick object at 0x03BD15F8>, <matplotlib.axis.XTick object at 0x03BD15E0>, <matplotlib.axis.XTick object at 0x03BD1178>, <matplotlib.axis.XTick object at 0x03C0FB80>], [Text(0, 0, 'A'), Text(1, 0, 'C'), Text(2, 0, 'G'), Text(3, 0, 'T')])\n```\n:::\n\n```{.python .cell-code}\nplt.yticks([0,1,2,3],['A', \"C\", \"G\", \"T\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n([<matplotlib.axis.YTick object at 0x03BD1A48>, <matplotlib.axis.YTick object at 0x03BD19B8>, <matplotlib.axis.YTick object at 0x03BD1160>, <matplotlib.axis.YTick object at 0x03C0FCB8>], [Text(0, 0, 'A'), Text(0, 1, 'C'), Text(0, 2, 'G'), Text(0, 3, 'T')])\n```\n:::\n\n```{.python .cell-code}\nplt.title(\"Influenza A\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](teste_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "teste_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}