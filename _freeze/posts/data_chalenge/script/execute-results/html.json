{
  "hash": "954f22328315abd9a6bfcd5e792465c8",
  "result": {
    "markdown": "---\ntitle: \"European Conference of the PHM Society - Data Challenge - 2020\"\nauthor: \"Júlia Gualberto, Eduardo Bragato, André Lucas e Edson Andrade\"\ndate: \"2021-07-29\"\ncategories: [code, challenge, python, machine learning]\n---\n\n\n### Objetivo\n\nO desafio proposto tinha como principal objetivo prever quando o filtro está totalmente obstruído criando modelos capazes de determinar com precisão a vida útil remanescente do filtro.\n\n### Estrutura do equipamento\n\nA bancada experimental é composta por:\n\n-   Bomba;\n-   Amortecedor;\n-   Partículas;\n-   Sensores de vazão;\n-   Filtro.\n\n![](bancada.jpg)\n\n### Pré Processamento\n\nÉ o processo que compreende a preparação, organização e estruturação dos dados.\n\nNessa etapa foi realizada a junção das bases de dados, a criação de algumas variáveis (*\"Clogged\", \"TTF\", \"RUL\"*) e a filtragem dos dados usando o *Butterworth filter*, que é um tipo de filtro eletrônico para retirar ruídos e obter frequências mais planas.\n\nPodemos visualizar no código a seguir:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np  \nimport pandas as pd\nimport seaborn as sns\nimport scipy as sp\nimport scipy.stats as stats\nsns.set(style='whitegrid')\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\nimport os\nimport openpyxl\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.signal import butter,filtfilt\nfrom yellowbrick.target import FeatureCorrelation\nimport time\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npath = os.getcwd()\npath += '\\\\Training'\nfiles = os.listdir(path + '\\\\Large')\nfiles_csv_large = [f for f in files if f[-3:] == 'csv']\nfiles_csv_large\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Sample33.csv', 'Sample34.csv', 'Sample35.csv', 'Sample36.csv', 'Sample37.csv', 'Sample38.csv', 'Sample39.csv', 'Sample40.csv', 'Sample41.csv', 'Sample42.csv', 'Sample43.csv', 'Sample44.csv']\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndef butter_lowpass_filter(data, cutoff, fs, order,nyq=5):\n    normal_cutoff = cutoff / nyq\n    b, a = butter(order, normal_cutoff, btype='low', analog=False)\n    y = filtfilt(b, a, data)\n    return y\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_large = pd.DataFrame()\ncount = 33\nfor f in files_csv_large:\n    data = pd.read_csv('Training/Large/' + f)\n    data['Sample']=count\n    data.loc[:,'Differential_Pressure(psi)'] = (data['Upstream_Pressure(psi)'] - data['Downstream_Pressure(psi)'])\n    data['Clogged'] = np.where(((data['Upstream_Pressure(psi)'] - data['Downstream_Pressure(psi)'])>=20)\n                     , 1, 0)\n    data['TTF'] = data['Time(s)'].values[data['Clogged'].idxmax()]\n    data['RUL'] = data['TTF'] - data['Time(s)']\n    \n    data['Filtered_Up'] = butter_lowpass_filter(data['Upstream_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=3,nyq=2)\n    data['Filtered_Down'] = butter_lowpass_filter(data['Downstream_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=2,nyq=2)\n    data['Filtered_Flow'] = butter_lowpass_filter(data['Flow_Rate(ml/m)'].loc[data['Sample'] == count], cutoff=0.1, fs=1/0.1, order=4,nyq=2) \n    data['Filtered_Diff'] = butter_lowpass_filter(data['Differential_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=3,nyq=2)\n    data['Clogged_Filter'] = np.where(((data['Filtered_Up'] - data['Filtered_Down'])>=20)\n                     , 1, 0)\n    data['TTF_Filter'] = data['Time(s)'].values[data['Clogged_Filter'].idxmax()]\n    data['RUL_Filter'] = data['TTF_Filter'] - data['Time(s)']\n    \n    data['Particle_Large'] = 1\n    if count <= 36: \n        data['Solid_Ratio'] = 0.4\n    elif 37<= count <=40:\n        data['Solid_Ratio'] = 0.425\n    else:\n        data['Solid_Ratio'] = 0.45    \n    \n    df_large = df_large.append(data)\n\n    count+=1\n    \n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfiles = os.listdir(path + '\\\\Small')\nfiles_csv_small = [f for f in files if f[-3:] == 'csv']\nfiles_csv_small\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Sample01.csv', 'Sample02.csv', 'Sample03.csv', 'Sample04.csv', 'Sample05.csv', 'Sample06.csv', 'Sample07.csv', 'Sample08.csv', 'Sample09.csv', 'Sample10.csv', 'Sample11.csv', 'Sample12.csv']\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_small = pd.DataFrame()\ncount = 1\nfor f in files_csv_small:\n    data = pd.read_csv('Training/Small/' + f)\n    data['Sample']=count\n    data.loc[:,'Differential_Pressure(psi)'] = (data['Upstream_Pressure(psi)'] - data['Downstream_Pressure(psi)'])\n    data['Clogged'] = np.where(((data['Upstream_Pressure(psi)'] - data['Downstream_Pressure(psi)'])>=20)\n                     , 1, 0)\n    data['TTF'] = data['Time(s)'].values[data['Clogged'].idxmax()]\n    data['RUL'] = data['TTF'] - data['Time(s)']\n    data['Filtered_Up'] = butter_lowpass_filter(data['Upstream_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=3,nyq=2)\n    data['Filtered_Down'] = butter_lowpass_filter(data['Downstream_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=2,nyq=2)\n    data['Filtered_Flow'] = butter_lowpass_filter(data['Flow_Rate(ml/m)'].loc[data['Sample'] == count], cutoff=0.1, fs=1/0.1, order=4,nyq=2) \n    data['Filtered_Diff'] = butter_lowpass_filter(data['Differential_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=3,nyq=2)\n    data['Clogged_Filter'] = np.where(((data['Filtered_Up'] - data['Filtered_Down'])>=20)\n                     , 1, 0)\n    data['TTF_Filter'] = data['Time(s)'].values[data['Clogged_Filter'].idxmax()]\n    data['RUL_Filter'] = data['TTF_Filter'] - data['Time(s)']\n\n    data['Particle_Large'] = 0\n    if count <= 4: \n        data['Solid_Ratio'] = 0.4\n    elif 5<= count <=8:\n        data['Solid_Ratio'] = 0.425\n    else:\n        data['Solid_Ratio'] = 0.45\n    \n    df_small = df_small.append(data)\n    count+=1\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_train = pd.concat([df_small, df_large])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_profiles = pd.read_excel(path + '\\\\Training Operation Profiles of Samples.xlsx')\n```\n:::\n\n\n### Análise Descritiva\n\nProcesso de examinar os dados previamente afim de obter um entendimento básico sobre os dados e relações existentes entre as variáveis.\n\n-   **Gráfico 1**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_large['Sample'].unique():\n    if value == 36 or value == 40 or value == 44:  \n        plt.plot(df_large['Time(s)'].loc[df_large['Sample'] == value], df_large['Upstream_Pressure(psi)'].loc[df_large['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_large['Time(s)'].loc[df_large['Sample'] == value], df_large['Downstream_Pressure(psi)'].loc[df_large['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino (Large) - Solid Ratio (40%, 42,5% e 45%)' ,fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-20-1.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 2**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_large['Sample'].unique():\n    if 33<=value<=36:  \n        plt.plot(df_large['Time(s)'].loc[df_large['Sample'] == value], df_large['Upstream_Pressure(psi)'].loc[df_large['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_large['Time(s)'].loc[df_large['Sample'] == value], df_large['Downstream_Pressure(psi)'].loc[df_large['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino (Large) - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-22-3.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 3**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_small['Sample'].unique():\n    if value == 1 or value == 5 or value == 9:  \n        plt.plot(df_small['Time(s)'].loc[df_small['Sample'] == value], df_small['Upstream_Pressure(psi)'].loc[df_small['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_small['Time(s)'].loc[df_small['Sample'] == value], df_small['Downstream_Pressure(psi)'].loc[df_small['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino (Small) - Solid Ratio (40%, 42,5% e 45%)' ,fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-24-5.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 4**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_small['Sample'].unique():\n    if 1<=value<=4:  \n        plt.plot(df_small['Time(s)'].loc[df_small['Sample'] == value], df_small['Upstream_Pressure(psi)'].loc[df_small['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_small['Time(s)'].loc[df_small['Sample'] == value], df_small['Downstream_Pressure(psi)'].loc[df_small['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino (Small) - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-26-7.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 5**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value ==1 or value == 5 or value == 10:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n    elif value ==33 or value == 38 or value == 42:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Small x Large ',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-28-9.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 6**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value ==9:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Small - Sample'+str(value))\n    elif value == 41:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Large - Sample'+str(value))\n\nplt.axhline(y=20, xmin=0.5, xmax=1.2)\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Small x Large - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-30-11.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 7**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\n#sns.set_style('darkgrid')\n#sns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=df_train[\"Filtered_Up\"])\nplt.title(\"BoxPlot Filtered_Up\", fontsize = 20)\nplt.show(ax)\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-32-13.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 8**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 2:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Differential_Pressure(psi)'].loc[df_train['Sample'] == value], label='Differential_Pressure(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Large x Small - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-34-15.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 9**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 4:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Differential_Pressure(psi)'].loc[df_train['Sample'] == value], label='Differential_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Diff'].loc[df_train['Sample'] == value], label='Filtered_Diff - Sample'+str(value))\n        \n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Large x Small com Filtro - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-36-17.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 10**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 4 or value == 8 or value == 12:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Up'].loc[df_train['Sample'] == value], label='Filtered_Up(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Small - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-38-19.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 11**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 4 or value == 8 or value == 12:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Flow_Rate(ml/m)'].loc[df_train['Sample'] == value], label='Flow_Rate(ml/m) - Sample'+str(value))\n        #plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Flow'].loc[df_train['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Flow_Rate(ml/m)',fontsize=20)\nplt.title('Dados de Treino Small - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-40-21.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 12**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 4 or value == 8 or value == 12:  \n        #plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Flow_Rate(ml/m)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Flow'].loc[df_train['Sample'] == value], label='Filtered_Flow - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Filtered_Flow',fontsize=20)\nplt.title('Dados de Treino Small - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-42-23.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 13**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 38 or value == 42:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Up'].loc[df_train['Sample'] == value], label='Filtered_Up(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Large com Filtro - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-44-25.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 14**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 38 or value == 42:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Flow_Rate(ml/m)'].loc[df_train['Sample'] == value], label='Flow_Rate(ml/m) - Sample'+str(value))\n        #plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Flow'].loc[df_train['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Flow_Rate(ml/m)',fontsize=20)\nplt.title('Dados de Treino Large - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-46-27.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 15**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 38 or value == 42:  \n        #plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Flow_Rate(ml/m)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Flow'].loc[df_train['Sample'] == value], label='Filtered_Flow - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Filtered_Flow',fontsize=20)\nplt.title('Dados de Treino Large - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-48-29.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 16**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure(figsize=(20,10))\n#sns.set_style('darkgrid')\n#sns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=df_train[\"Filtered_Flow\"])\nplt.title(\"BoxPlot Filtered_Flow\", fontsize = 20)\nplt.show(ax)\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-50-31.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 17**\n\n\n::: {.cell}\n\n```{.python .cell-code}\ng=sns.lmplot( x=\"TTF_Filter\", y=\"Solid_Ratio\", data=df_train, fit_reg=False, hue='Particle_Large', legend= False)\nsns.set_style('darkgrid')\nplt.legend(loc= 'upper right', fontsize=20)\nplt.title(\"Time to Fail x Solid Ratio\", fontsize=20)\ng.fig.set_size_inches(20,10)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-52-33.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 19**\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_cor = (df_train.loc[:,['RUL_Filter','Filtered_Up', 'Clogged_Filter', 'Filtered_Diff', 'Filtered_Down','Filtered_Flow', 'Solid_Ratio']])\n\nplt.figure(figsize=(20,10))\nax = FeatureCorrelation()\nax.fit(df_cor[['Filtered_Up', 'Clogged_Filter', 'Filtered_Diff', 'Filtered_Down','Filtered_Flow', 'Solid_Ratio']],df_cor['RUL_Filter'])\n```\n\n::: {.cell-output-display}\n```{=html}\n<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>FeatureCorrelation(ax=&lt;AxesSubplot:&gt;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FeatureCorrelation</label><div class=\"sk-toggleable__content\"><pre>FeatureCorrelation(ax=&lt;AxesSubplot:&gt;)</pre></div></div></div></div></div>\n```\n:::\n\n```{.python .cell-code}\nplt.title(\"Correlação com RUL\", fontsize = 20)\nplt.show(ax)\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-54-35.png){width=1920}\n:::\n:::\n\n\n-   **Gráfico 20**\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef dual_heat_map(data,figsize=(25,15),dual=True):\n\n    sns.set(font_scale=1.1)\n    corr_pearson=data.corr(method='pearson')\n    corr_spearman=data.corr(method='spearman')\n\n    mask = np.zeros_like(corr_pearson)\n    mask[np.triu_indices_from(mask)] = True\n\n    if dual:\n        fig, ax = plt.subplots(nrows=1,ncols=2,figsize=figsize)\n        sns.heatmap(corr_pearson,cmap=\"coolwarm\", linewidths=0.5, annot=True, annot_kws={\"size\":14},mask=mask,square=True,ax=ax[0],fmt='.2f',cbar=False)\n        sns.heatmap(corr_spearman,cmap=\"coolwarm\", linewidths=0.5, annot=True, annot_kws={\"size\":14},mask=mask,square=True,ax=ax[1],fmt='.2f',cbar=False)\n        ax[0].set_title('Pearson Correlation')\n        ax[1].set_title('Spearman Correlation')\n        plt.show()\n\n    else:\n        fig, ax = plt.subplots(nrows=1,ncols=1,figsize=figsize)\n        sns.heatmap(corr_pearson,cmap=\"coolwarm\", linewidths=0.5, annot=True, annot_kws={\"size\":14},mask=mask,square=True,fmt='.2f',cbar=False)\n        ax.set_title('Pearson correlation')\n        plt.show()\n\n    return\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndual_heat_map(df_cor,figsize=(25,15))\n```\n\n::: {.cell-output-display}\n![](script_files/figure-html/unnamed-chunk-58-37.png){width=2400}\n:::\n:::\n",
    "supporting": [
      "script_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}