[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Início",
    "section": "",
    "text": "code\n\n\nanalysis\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\nJul 19, 2022\n\n\nJúlia Gualberto\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncode\n\n\nanalytics\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\nJun 30, 2022\n\n\nJúlia Gualberto\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncode\n\n\nchallenge\n\n\npython\n\n\nmachine learning\n\n\n\n\n\n\n\n\n\n\n\nJul 29, 2021\n\n\nJúlia Gualberto, Eduardo Bragato, André Lucas e Edson Andrade\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Sobre",
    "section": "",
    "text": "Meu nome é Júlia Gualberto, sou estudante de estatística e esse é meu blog."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Genomas/genomas.html",
    "href": "posts/Genomas/genomas.html",
    "title": "Comparação de Genomas",
    "section": "",
    "text": "O DNA é uma molécula presente em todos os seres vivos, que é responsável por armazenar as caracterı́sticas hereditárias. Ela é composta por sequências de nucleotı́deos, que podem ser de quatro tipos: Adenina (A), Timina (T), Citosina (C) ou Guanina (G).\nNeste estudo de caso, queremos avaliar se estruturas com funções parecidas de organismos diferentes têm diferenças. Para isso vamos avaliar a quantidade de pares de nucleotı́deos.\nPara comparar as duas estruturas requere-se um mapa de calor (Heatmap) que permita realizar a comparação dos pares de nucleotı́deos. Comente sobre os resultados encontrados."
  },
  {
    "objectID": "posts/Genomas/teste.html",
    "href": "posts/Genomas/teste.html",
    "title": "Comparação de Genomas",
    "section": "",
    "text": "O DNA é uma molécula presente em todos os seres vivos, que é responsável por armazenar as caracterı́sticas hereditárias. Ela é composta por sequências de nucleotı́deos, que podem ser de quatro tipos: Adenina (A), Timina (T), Citosina (C) ou Guanina (G).\nNeste estudo de caso, queremos avaliar se estruturas com funções parecidas de organismos diferentes têm diferenças. Para isso vamos avaliar a quantidade de pares de nucleotı́deos.\nOs dados utilizados para este estudo referem-se a sequências de DNA disponı́veis nos seguintes links: SARS-CoV-2 Wuhan-Hu-1 e Virus da Influenza A (California/07/2009(H1N1)).\nPara comparar as duas estruturas requere-se um mapa de calor (Heatmap) que permita realizar a comparação dos pares de nucleotı́deos. Comente sobre os resultados encontrados.\n\n\nInfluenza\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ninfluenza = open('sequence-influenza.txt').read() # Ler o arquivo\n\ninfluenza = influenza.replace(\"\\n\",\"\") # retirar os \"\\n\"\npares_influenza = [\n    influenza[i] + influenza[i + 1] for i in range(len(influenza) - 1)\n]\n\n\nfrom itertools import permutations\n\ngenes = ['A', 'T', 'C', 'G']\n\ncombinations_genes = list(permutations(genes, 2))\n\n\ntodos_genes = [''.join(i) for i in combinations_genes]\ntodos_genes.extend(['AA', 'TT', 'CC', 'GG'])\n\n# dicionario\ngenes_dict = {i:pares_influenza.count(i) for i in todos_genes}\n\n# colocar em ordem\nordered_dict = sorted(genes_dict.items(), key=lambda x: x[0], reverse=False)\n\nordered_dict = {i[0]:i[1] for i in ordered_dict}\n\n# matriz\nmatriz_influenza = np.array(list(ordered_dict.values())).reshape(4,4)\n\n\n\nplt.imshow(matriz_influenza, cmap = 'Blues', origin=\"lower\")\nplt.xlabel('Índice da linha'); plt.ylabel('Índice da coluna')\nplt.xticks((0,1,2,3),['A','C', 'G', 'T'])\n\n([<matplotlib.axis.XTick object at 0x1BAC7598>, <matplotlib.axis.XTick object at 0x1BAC7580>, <matplotlib.axis.XTick object at 0x1BAC7118>, <matplotlib.axis.XTick object at 0x1BB03B20>], [Text(0, 0, 'A'), Text(1, 0, 'C'), Text(2, 0, 'G'), Text(3, 0, 'T')])\n\nplt.yticks([0,1,2,3],['A', \"C\", \"G\", \"T\"])\n\n([<matplotlib.axis.YTick object at 0x1BAC79E8>, <matplotlib.axis.YTick object at 0x1BAC7958>, <matplotlib.axis.YTick object at 0x1BAC7100>, <matplotlib.axis.YTick object at 0x1BB03B08>], [Text(0, 0, 'A'), Text(0, 1, 'C'), Text(0, 2, 'G'), Text(0, 3, 'T')])\n\nplt.title(\"Influenza A\")\nplt.show()\n\n\n\n\n\n\nCovid\n\ncovid = open('sequence-covid.txt').read() # Ler o arquivo\n\ncovid = covid.replace(\"\\n\",\"\") # retirar os \"\\n\"\npares_covid = [\n    covid[i] + covid[i + 1] for i in range(len(covid) - 1)\n]\n\n\nfrom itertools import permutations\n\ngenes = ['A', 'T', 'C', 'G']\n\ncombinations_genes = list(permutations(genes, 2))\n\n\ntodos_genes = [''.join(i) for i in combinations_genes]\ntodos_genes.extend(['AA', 'TT', 'CC', 'GG'])\n\n# dicionario\ngenes_dict = {i:pares_covid.count(i) for i in todos_genes}\n\n# colocar em ordem\nordered_dict = sorted(genes_dict.items(), key=lambda x: x[0], reverse=False)\n\nordered_dict = {i[0]:i[1] for i in ordered_dict}\n\n# matriz\nmatriz_covid = np.array(list(ordered_dict.values())).reshape(4,4)\n\n\nimport matplotlib.pyplot as plt\n\nplt.imshow(matriz_influenza, cmap = 'Blues', origin=\"lower\")\nplt.xlabel('Índice da linha'); plt.ylabel('Índice da coluna')\nplt.xticks((0,1,2,3),['A','C', 'G', 'T'])\n\n([<matplotlib.axis.XTick object at 0x1BB1DA30>, <matplotlib.axis.XTick object at 0x1BB1DE38>, <matplotlib.axis.XTick object at 0x1BB034A8>, <matplotlib.axis.XTick object at 0x1C7B5058>], [Text(0, 0, 'A'), Text(1, 0, 'C'), Text(2, 0, 'G'), Text(3, 0, 'T')])\n\nplt.yticks([0,1,2,3],['A', \"C\", \"G\", \"T\"])\n\n([<matplotlib.axis.YTick object at 0x1C7A11C0>, <matplotlib.axis.YTick object at 0x1C6B1DD8>, <matplotlib.axis.YTick object at 0x1BAF5118>, <matplotlib.axis.YTick object at 0x1C7B5748>], [Text(0, 0, 'A'), Text(0, 1, 'C'), Text(0, 2, 'G'), Text(0, 3, 'T')])\n\nplt.title(\"Covid\")\nplt.show()"
  },
  {
    "objectID": "posts/data_chalenge/script.html",
    "href": "posts/data_chalenge/script.html",
    "title": "European Conference of the PHM Society - Data Challenge - 2020",
    "section": "",
    "text": "Estrutura do equipamento\nA bancada experimental é composta por:\n\nBomba;\nAmortecedor;\nPartículas;\nSensores de vazão;\nFiltro.\n\n\n\n\nPré Processamento\nÉ o processo que compreende a preparação, organização e estruturação dos dados.\nNessa etapa foi realizada a junção das bases de dados, a criação de algumas variáveis (“Clogged”, “TTF”, “RUL”) e a filtragem dos dados usando o Butterworth filter, que é um tipo de filtro eletrônico para retirar ruídos e obter frequências mais planas.\nPodemos visualizar no código a seguir:\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np  \nimport pandas as pd\nimport seaborn as sns\nimport scipy as sp\nimport scipy.stats as stats\nsns.set(style='whitegrid')\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\nimport os\nimport openpyxl\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.signal import butter,filtfilt\nfrom yellowbrick.target import FeatureCorrelation\nimport time\n\n\npath = os.getcwd()\npath += '\\\\Training'\nfiles = os.listdir(path + '\\\\Large')\nfiles_csv_large = [f for f in files if f[-3:] == 'csv']\nfiles_csv_large\n\n['Sample33.csv', 'Sample34.csv', 'Sample35.csv', 'Sample36.csv', 'Sample37.csv', 'Sample38.csv', 'Sample39.csv', 'Sample40.csv', 'Sample41.csv', 'Sample42.csv', 'Sample43.csv', 'Sample44.csv']\n\n\n\ndef butter_lowpass_filter(data, cutoff, fs, order,nyq=5):\n    normal_cutoff = cutoff / nyq\n    b, a = butter(order, normal_cutoff, btype='low', analog=False)\n    y = filtfilt(b, a, data)\n    return y\n\n\ndf_large = pd.DataFrame()\ncount = 33\nfor f in files_csv_large:\n    data = pd.read_csv('Training/Large/' + f)\n    data['Sample']=count\n    data.loc[:,'Differential_Pressure(psi)'] = (data['Upstream_Pressure(psi)'] - data['Downstream_Pressure(psi)'])\n    data['Clogged'] = np.where(((data['Upstream_Pressure(psi)'] - data['Downstream_Pressure(psi)'])>=20)\n                     , 1, 0)\n    data['TTF'] = data['Time(s)'].values[data['Clogged'].idxmax()]\n    data['RUL'] = data['TTF'] - data['Time(s)']\n    \n    data['Filtered_Up'] = butter_lowpass_filter(data['Upstream_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=3,nyq=2)\n    data['Filtered_Down'] = butter_lowpass_filter(data['Downstream_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=2,nyq=2)\n    data['Filtered_Flow'] = butter_lowpass_filter(data['Flow_Rate(ml/m)'].loc[data['Sample'] == count], cutoff=0.1, fs=1/0.1, order=4,nyq=2) \n    data['Filtered_Diff'] = butter_lowpass_filter(data['Differential_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=3,nyq=2)\n    data['Clogged_Filter'] = np.where(((data['Filtered_Up'] - data['Filtered_Down'])>=20)\n                     , 1, 0)\n    data['TTF_Filter'] = data['Time(s)'].values[data['Clogged_Filter'].idxmax()]\n    data['RUL_Filter'] = data['TTF_Filter'] - data['Time(s)']\n    \n    data['Particle_Large'] = 1\n    if count <= 36: \n        data['Solid_Ratio'] = 0.4\n    elif 37<= count <=40:\n        data['Solid_Ratio'] = 0.425\n    else:\n        data['Solid_Ratio'] = 0.45    \n    \n    df_large = df_large.append(data)\n\n    count+=1\n    \n\n\nfiles = os.listdir(path + '\\\\Small')\nfiles_csv_small = [f for f in files if f[-3:] == 'csv']\nfiles_csv_small\n\n['Sample01.csv', 'Sample02.csv', 'Sample03.csv', 'Sample04.csv', 'Sample05.csv', 'Sample06.csv', 'Sample07.csv', 'Sample08.csv', 'Sample09.csv', 'Sample10.csv', 'Sample11.csv', 'Sample12.csv']\n\n\n\ndf_small = pd.DataFrame()\ncount = 1\nfor f in files_csv_small:\n    data = pd.read_csv('Training/Small/' + f)\n    data['Sample']=count\n    data.loc[:,'Differential_Pressure(psi)'] = (data['Upstream_Pressure(psi)'] - data['Downstream_Pressure(psi)'])\n    data['Clogged'] = np.where(((data['Upstream_Pressure(psi)'] - data['Downstream_Pressure(psi)'])>=20)\n                     , 1, 0)\n    data['TTF'] = data['Time(s)'].values[data['Clogged'].idxmax()]\n    data['RUL'] = data['TTF'] - data['Time(s)']\n    data['Filtered_Up'] = butter_lowpass_filter(data['Upstream_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=3,nyq=2)\n    data['Filtered_Down'] = butter_lowpass_filter(data['Downstream_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=2,nyq=2)\n    data['Filtered_Flow'] = butter_lowpass_filter(data['Flow_Rate(ml/m)'].loc[data['Sample'] == count], cutoff=0.1, fs=1/0.1, order=4,nyq=2) \n    data['Filtered_Diff'] = butter_lowpass_filter(data['Differential_Pressure(psi)'].loc[data['Sample'] == count], cutoff=0.01, fs=1/0.1, order=3,nyq=2)\n    data['Clogged_Filter'] = np.where(((data['Filtered_Up'] - data['Filtered_Down'])>=20)\n                     , 1, 0)\n    data['TTF_Filter'] = data['Time(s)'].values[data['Clogged_Filter'].idxmax()]\n    data['RUL_Filter'] = data['TTF_Filter'] - data['Time(s)']\n\n    data['Particle_Large'] = 0\n    if count <= 4: \n        data['Solid_Ratio'] = 0.4\n    elif 5<= count <=8:\n        data['Solid_Ratio'] = 0.425\n    else:\n        data['Solid_Ratio'] = 0.45\n    \n    df_small = df_small.append(data)\n    count+=1\n\n\ndf_train = pd.concat([df_small, df_large])\n\n\ndf_profiles = pd.read_excel(path + '\\\\Training Operation Profiles of Samples.xlsx')\n\n\n\nAnálise Descritiva\nProcesso de examinar os dados previamente afim de obter um entendimento básico sobre os dados e relações existentes entre as variáveis.\n\nGráfico 1\n\n\nplt.figure(figsize=(20,10))\nfor value in df_large['Sample'].unique():\n    if value == 36 or value == 40 or value == 44:  \n        plt.plot(df_large['Time(s)'].loc[df_large['Sample'] == value], df_large['Upstream_Pressure(psi)'].loc[df_large['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_large['Time(s)'].loc[df_large['Sample'] == value], df_large['Downstream_Pressure(psi)'].loc[df_large['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino (Large) - Solid Ratio (40%, 42,5% e 45%)' ,fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 2\n\n\nplt.figure(figsize=(20,10))\nfor value in df_large['Sample'].unique():\n    if 33<=value<=36:  \n        plt.plot(df_large['Time(s)'].loc[df_large['Sample'] == value], df_large['Upstream_Pressure(psi)'].loc[df_large['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_large['Time(s)'].loc[df_large['Sample'] == value], df_large['Downstream_Pressure(psi)'].loc[df_large['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino (Large) - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 3\n\n\nplt.figure(figsize=(20,10))\nfor value in df_small['Sample'].unique():\n    if value == 1 or value == 5 or value == 9:  \n        plt.plot(df_small['Time(s)'].loc[df_small['Sample'] == value], df_small['Upstream_Pressure(psi)'].loc[df_small['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_small['Time(s)'].loc[df_small['Sample'] == value], df_small['Downstream_Pressure(psi)'].loc[df_small['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino (Small) - Solid Ratio (40%, 42,5% e 45%)' ,fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 4\n\n\nplt.figure(figsize=(20,10))\nfor value in df_small['Sample'].unique():\n    if 1<=value<=4:  \n        plt.plot(df_small['Time(s)'].loc[df_small['Sample'] == value], df_small['Upstream_Pressure(psi)'].loc[df_small['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_small['Time(s)'].loc[df_small['Sample'] == value], df_small['Downstream_Pressure(psi)'].loc[df_small['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino (Small) - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 5\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value ==1 or value == 5 or value == 10:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n    elif value ==33 or value == 38 or value == 42:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Small x Large ',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 6\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value ==9:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Small - Sample'+str(value))\n    elif value == 41:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Large - Sample'+str(value))\n\nplt.axhline(y=20, xmin=0.5, xmax=1.2)\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Small x Large - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 7\n\n\nplt.figure(figsize=(20,10))\n#sns.set_style('darkgrid')\n#sns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=df_train[\"Filtered_Up\"])\nplt.title(\"BoxPlot Filtered_Up\", fontsize = 20)\nplt.show(ax)\n\n\n\n\n\nGráfico 8\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 2:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Differential_Pressure(psi)'].loc[df_train['Sample'] == value], label='Differential_Pressure(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Large x Small - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 9\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 4:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Differential_Pressure(psi)'].loc[df_train['Sample'] == value], label='Differential_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Diff'].loc[df_train['Sample'] == value], label='Filtered_Diff - Sample'+str(value))\n        \n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Large x Small com Filtro - 40% Solid Ratio',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 10\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 4 or value == 8 or value == 12:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Up'].loc[df_train['Sample'] == value], label='Filtered_Up(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Small - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 11\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 4 or value == 8 or value == 12:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Flow_Rate(ml/m)'].loc[df_train['Sample'] == value], label='Flow_Rate(ml/m) - Sample'+str(value))\n        #plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Flow'].loc[df_train['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Flow_Rate(ml/m)',fontsize=20)\nplt.title('Dados de Treino Small - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 12\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 4 or value == 8 or value == 12:  \n        #plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Flow_Rate(ml/m)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Flow'].loc[df_train['Sample'] == value], label='Filtered_Flow - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Filtered_Flow',fontsize=20)\nplt.title('Dados de Treino Small - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 13\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 38 or value == 42:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Upstream_Pressure(psi)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Up'].loc[df_train['Sample'] == value], label='Filtered_Up(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Pressure(psi)',fontsize=20)\nplt.title('Dados de Treino Large com Filtro - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 14\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 38 or value == 42:  \n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Flow_Rate(ml/m)'].loc[df_train['Sample'] == value], label='Flow_Rate(ml/m) - Sample'+str(value))\n        #plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Flow'].loc[df_train['Sample'] == value], label='Down_Pressure(psi) - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Flow_Rate(ml/m)',fontsize=20)\nplt.title('Dados de Treino Large - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 15\n\n\nplt.figure(figsize=(20,10))\nfor value in df_train['Sample'].unique():\n    if value == 34 or value == 38 or value == 42:  \n        #plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Flow_Rate(ml/m)'].loc[df_train['Sample'] == value], label='Up_Pressure(psi) - Sample'+str(value))\n        plt.plot(df_train['Time(s)'].loc[df_train['Sample'] == value], df_train['Filtered_Flow'].loc[df_train['Sample'] == value], label='Filtered_Flow - Sample'+str(value))\n\n\nplt.legend(fontsize=20)\nplt.xlabel('Time(s)',fontsize=20)\nplt.ylabel('Filtered_Flow',fontsize=20)\nplt.title('Dados de Treino Large - Solid Ratio (40%, 42,5% e 45%)',fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()\n\n\n\n\n\nGráfico 16\n\n\nplt.figure(figsize=(20,10))\n#sns.set_style('darkgrid')\n#sns.set_theme(style=\"whitegrid\")\nax = sns.boxplot(x=df_train[\"Filtered_Flow\"])\nplt.title(\"BoxPlot Filtered_Flow\", fontsize = 20)\nplt.show(ax)\n\n\n\n\n\nGráfico 17\n\n\ng=sns.lmplot( x=\"TTF_Filter\", y=\"Solid_Ratio\", data=df_train, fit_reg=False, hue='Particle_Large', legend= False)\nsns.set_style('darkgrid')\nplt.legend(loc= 'upper right', fontsize=20)\nplt.title(\"Time to Fail x Solid Ratio\", fontsize=20)\ng.fig.set_size_inches(20,10)\nplt.show()\n\n\n\n\n\nGráfico 19\n\n\ndf_cor = (df_train.loc[:,['RUL_Filter','Filtered_Up', 'Clogged_Filter', 'Filtered_Diff', 'Filtered_Down','Filtered_Flow', 'Solid_Ratio']])\n\nplt.figure(figsize=(20,10))\nax = FeatureCorrelation()\nax.fit(df_cor[['Filtered_Up', 'Clogged_Filter', 'Filtered_Diff', 'Filtered_Down','Filtered_Flow', 'Solid_Ratio']],df_cor['RUL_Filter'])\n\nFeatureCorrelation(ax=<AxesSubplot:>)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.FeatureCorrelationFeatureCorrelation(ax=<AxesSubplot:>)\n\nplt.title(\"Correlação com RUL\", fontsize = 20)\nplt.show(ax)\n\n\n\n\n\nGráfico 20\n\n\ndef dual_heat_map(data,figsize=(25,15),dual=True):\n\n    sns.set(font_scale=1.1)\n    corr_pearson=data.corr(method='pearson')\n    corr_spearman=data.corr(method='spearman')\n\n    mask = np.zeros_like(corr_pearson)\n    mask[np.triu_indices_from(mask)] = True\n\n    if dual:\n        fig, ax = plt.subplots(nrows=1,ncols=2,figsize=figsize)\n        sns.heatmap(corr_pearson,cmap=\"coolwarm\", linewidths=0.5, annot=True, annot_kws={\"size\":14},mask=mask,square=True,ax=ax[0],fmt='.2f',cbar=False)\n        sns.heatmap(corr_spearman,cmap=\"coolwarm\", linewidths=0.5, annot=True, annot_kws={\"size\":14},mask=mask,square=True,ax=ax[1],fmt='.2f',cbar=False)\n        ax[0].set_title('Pearson Correlation')\n        ax[1].set_title('Spearman Correlation')\n        plt.show()\n\n    else:\n        fig, ax = plt.subplots(nrows=1,ncols=1,figsize=figsize)\n        sns.heatmap(corr_pearson,cmap=\"coolwarm\", linewidths=0.5, annot=True, annot_kws={\"size\":14},mask=mask,square=True,fmt='.2f',cbar=False)\n        ax.set_title('Pearson correlation')\n        plt.show()\n\n    return\n\n\ndual_heat_map(df_cor,figsize=(25,15))"
  },
  {
    "objectID": "posts/Wikipedia/script.html",
    "href": "posts/Wikipedia/script.html",
    "title": "Webscraping no Wikipédia",
    "section": "",
    "text": "Acessando a página de interesse\n\n\n#!pip install bs4\n#!pip install requests\n\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport requests\nurl = requests.get(\"https://pt.wikipedia.org/wiki/Lista_de_munic%C3%ADpios_do_Esp%C3%ADrito_Santo_por_popula%C3%A7%C3%A3o\")\n#print(url.status_code)\n\n\nArmazenando o conteúdo HTML da página:\n\n\nconteudo = BeautifulSoup(url.content, 'html.parser')\n\n\nObtendo a tabela:\n\n\ntable = conteudo.find('table')\n\n\nExtraindo os títulos das colunas:\n\n\ntitles = [i.text for i in table.find_all('th')]\n\n\nDataframe para armazenar a tabela\n\n\ndata = pd.DataFrame(columns = titles)\n\n\nPreenchendo a tabela:\n\n\nfor j in table.find_all('tr')[1:]:\n    row_data = j.find_all('td')\n    row = [i.text for i in row_data]\n    length = len(data)\n    data.loc[length] = row\n\n\nTabela:\n\n\nprint(data)\n\n   Posição                 Município População\\n\n0        1                     Serra   527.240\\n\n1        2                Vila Velha   501.325\\n\n2        3                 Cariacica   383.917\\n\n3        4                   Vitória   365.855\\n\n4        5   Cachoeiro de Itapemirim   210.589\\n\n..     ...                       ...         ...\n73      74             Alto Rio Novo     7 836\\n\n74      75                    Apiacá     7 567\\n\n75      76        Dores do Rio Preto     6 749\\n\n76      77                  Mucurici     5 524\\n\n77      78    Divino de São Lourenço     4 304\\n\n\n[78 rows x 3 columns]\n\n\n\nLimpando a tabela:\n\n\npopulacao = data['População\\n']\n\npopulacao1 = [i.split('\\n')[0].replace('\\xa0','.').split('[2]')[0] for i in populacao]\n\ndata['População\\n'] = populacao1\n\ndata = data.rename(columns={'População\\n': 'População'}) \n\n\nTabela Final:\n\n\nprint(data)\n\n   Posição                 Município População\n0        1                     Serra   527.240\n1        2                Vila Velha   501.325\n2        3                 Cariacica   383.917\n3        4                   Vitória   365.855\n4        5   Cachoeiro de Itapemirim   210.589\n..     ...                       ...       ...\n73      74             Alto Rio Novo     7 836\n74      75                    Apiacá     7 567\n75      76        Dores do Rio Preto     6 749\n76      77                  Mucurici     5 524\n77      78    Divino de São Lourenço     4 304\n\n[78 rows x 3 columns]"
  }
]